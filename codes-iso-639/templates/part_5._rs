use crate::LanguageCodeError;
use std::fmt;
use std::str::FromStr;
use codes_agency::{Agency, Standard};

#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

///
/// An instance of the `Standard` struct defined in the
/// [`codes_agency`](https://docs.rs/codes-agency/latest/codes_agency/)
/// package that describes the ISO-639-5 specification.
///
pub const ISO_639_5: Standard = Standard::new_with_long_ref(
    Agency::ISO,
    "639-5",
    "ISO 639-5:2008",
    "Codes for the representation of names of languages â€” Part 5: Alpha-3 code for language families and groups",
    "https://www.iso.org/standard/39536.html",
);

/// 
/// A Language Code enumeration representing the three-letter
/// 639-35identifier.
///
/// ISO 639-5 defines alpha-3 (3-letter) codes, called "collective
/// codes", that identify language families and groups. As of the
/// February 11, 2013 update to ISO 639-5, the standard defines
/// 115 collective codes. The United States Library of Congress
/// maintains the list of Alpha-3 codes that comprise ISO 639-5.
///
/// The standard does not cover all language families used by
/// linguists. The languages covered by a group code need not be
/// linguistically related, but may have a geographic relation,
/// or category relation (such as Creoles).
/// 
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "serde", derive(Deserialize, Serialize))]
pub enum {{ type_name }} {{ "{" }}{% for id in all_ids %}
    /// {{ codes[id].label }}
    {{ id | capitalize }},{% endfor %}
{{ "}" }}

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl fmt::Display for {{ type_name }} {{ "{" }}
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {{ "{" }}
        write!(f, "{}", self.code())
    {{ "}" }}
{{ "}" }}

impl FromStr for {{ type_name }} {{ "{" }}
    type Err = {{ type_name }}Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {{ "{" }}
        match s {{ "{" }}{% for id in all_ids %}
            "{{ id }}" => Ok(Self::{{ id | capitalize }}),{% endfor %}
            _ => Err(codes_common::unknown_value("{{ type_name }}", s)),
        {{ "}" }}
    {{ "}" }}
{{ "}" }}

impl AsRef<str> for {{ type_name }} {{ "{" }}
    fn as_ref(&self) -> &str {{ "{" }}
        self.code()
    {{ "}" }}
{{ "}" }}

impl From<{{ type_name }}> for String {{ "{" }}
    fn from(v: {{ type_name }}) -> String {{ "{" }}
        v.code().to_string()
    {{ "}" }}
{{ "}" }}

impl {{ type_name }} {{ "{" }}
     ///
     /// Returns the ISO 639-5 three-letter code a string.
     ///
     pub fn code(&self) -> &'static str {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}
             Self::{{ id | capitalize }} => "{{ id }}",{% endfor %}
         {{ "}" }}
     {{ "}" }}

     ///
     /// Returns the name of this language family or group.
     ///
     pub fn family_or_group_name(&self) -> &'static str {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}
             Self::{{ id | capitalize }} => "{{ codes[id].label }}",{% endfor %}
         {{ "}" }}
     {{ "}" }}
{{ "}" }}
