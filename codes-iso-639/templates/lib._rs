use std::fmt;
use std::str::FromStr;
use codes_agency::{Agency, Standard};

#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

///
/// An instance of the `Standard` struct defined in the
/// [`codes_agency`](https://docs.rs/codes-agency/latest/codes_agency/)
/// package that describes the ISO-10383 specification.
///
pub const ISO_10383: Standard = Standard::new_with_long_ref(
    Agency::ISO,
    "99999",
    "ISO 99999:2023",
    "An ISO Standard",
    "https://www.iso.org/standard/",
);

/// 
/// 
/// 
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "serde", derive(Deserialize, Serialize))]
pub enum {{ type_name }} {{ "{" }}{% for id in all_ids %}
    /// {{ codes[id].market_name }}
    {% if id is matching("^[0-9]") %}#[allow(non_camel_case_types)]
    m{% endif %}{{ id }},{% endfor %}
{{ "}" }}

pub use common::CodeParseError as {{ type_name }}Error;

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl fmt::Display for {{ type_name }} {{ "{" }}
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {{ "{" }}
        write!(f, "{}", self.code())
    {{ "}" }}
{{ "}" }}

impl FromStr for {{ type_name }} {{ "{" }}
    type Err = {{ type_name }}Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {{ "{" }}
        match s {{ "{" }}{% for id in all_ids %}
            "{{ id }}" => Ok(Self::{% if id is matching("^[0-9]") %}m{% endif %}{{ id }}),{% endfor %}
            _ => Err(common::unknown_value("{{ type_name }}", s)),
        {{ "}" }}
    {{ "}" }}
{{ "}" }}

impl AsRef<str> for {{ type_name }} {{ "{" }}
    fn as_ref(&self) -> &str {{ "{" }}
        self.code()
    {{ "}" }}
{{ "}" }}

impl From<{{ type_name }}> for String {{ "{" }}
    fn from(v: {{ type_name }}) -> String {{ "{" }}
        v.code().to_string()
    {{ "}" }}
{{ "}" }}

impl {{ type_name }} {{ "{" }}
     pub fn code(&self) -> &'static str {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}
             Self::{% if id is matching("^[0-9]") %}m{% endif %}{{ id }} => "{{ id }}",{% endfor %}
         {{ "}" }}
     {{ "}" }}


{{ "}" }}
