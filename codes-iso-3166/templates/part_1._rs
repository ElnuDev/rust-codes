use codes_agency::{Agency, Standard};
use codes_common::code_impl;
use crate::CountryCodeError;
use std::str::FromStr;

#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};

#[cfg(feature = "languages")]
use codes_iso_639::part_3::LanguageCode;

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

///
/// An instance of the `Standard` struct defined in the
/// [`codes_agency`](https://docs.rs/codes-agency/latest/codes_agency/)
/// package that describes the ISO 3166 specification.
///
pub const ISO_3166: Standard = Standard::new_with_long_ref(
    Agency::ISO,
    "3166-1",
    "ISO 3166-1:2020",
    "Codes for the representation of names of countries and their subdivisions - Part 1: Country code",
    "https://www.iso.org/standard/72482.html",
);

/// 
/// This is a full enumeration of all the countries defined in ISO 3166-1.
/// 
/// The standard's two-letter code is used as a variant name, in upper
/// case.  
/// 
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "serde", derive(Deserialize, Serialize))]
pub enum {{ type_name }} {{ "{" }}{% for id in all_ids %}
    /// {{ codes[id].short_name | replace(from="[", to="\[") | replace(from="]", to="\]") }}
    {{ id }},{% endfor %}
{{ "}" }}

/// Provides an array of all defined codes, useful for queries.
pub const ALL_CODES: [{{ type_name }};{{ all_ids | length }}] = [{% for id in all_ids %}
    {{ type_name }}::{{ id }},{% endfor %}
];

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl FromStr for {{ type_name }} {{ "{" }}
    type Err = {{ type_name }}Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {{ "{" }}
        match s {{ "{" }}{% for id in all_ids %}
            "{{ id }}" => Ok(Self::{{ id }}),{% endfor %}
            _ => Err(codes_common::unknown_value("{{ type_name }}", s)),
        {{ "}" }}
    {{ "}" }}
{{ "}" }}

code_impl!({{ type_name }}, alpha_2_code);

impl {{ type_name }} {{ "{" }}
     /// Returns the two-letter country codes which are the most widely
     /// used of the three, and used most prominently for the Internet's
     /// country code top-level domains (with a few exceptions).
     pub fn alpha_2_code(&self) -> &'static str {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}
             Self::{{ id }} => "{{ id }}",{% endfor %}
         {{ "}" }}
     {{ "}" }}

     pub fn short_name(&self) -> &'static str {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}
             Self::{{ id }} => "{{ codes[id].short_name }}",{% endfor %}
         {{ "}" }}
     {{ "}" }}

     /// Returns the three-letter country codes which allow a better
     /// visual association between the codes and the country names
     /// than the alpha-2 codes.
     #[cfg(feature = "alpha_3_code")]
     pub fn alpha_3_code(&self) -> Option<&'static str> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].alpha_3_code %}
             Self::{{ id }} => Some("{{ codes[id].alpha_3_code }}"),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}

     /// Returns the three-digit country codes which are identical to
     /// those developed and maintained by the United Nations
     /// Statistics Division, with the advantage of script (writing
     /// system) independence, and hence useful for people or systems
     /// using non-Latin scripts.
     #[cfg(feature = "numeric_code")]
     pub fn numeric_code(&self) -> Option<u16> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].numeric_code %}
             Self::{{ id }} => Some({{ codes[id].numeric_code }}),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "independent")]
     pub fn independent(&self) -> Option<bool> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].independent %}
             Self::{{ id }} => Some({{ codes[id].independent }}),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "status")]
     pub fn status(&self) -> Status {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}
             Self::{{ id }} => {{ codes[id].status }},{% endfor %}
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "full_name")]
     pub fn full_name(&self) -> Option<&'static str> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].full_name %}
             Self::{{ id }} => Some("{{ codes[id].full_name }}"),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "local_names")]
     pub fn local_short_name(&self) -> Option<&'static str> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].local_short_name %}
             Self::{{ id }} => Some("{{ codes[id].local_short_name }}"),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(all(feature = "local_names", feature = "full_name"))]
     pub fn local_full_name(&self) -> Option<&'static str> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].local_full_name %}
             Self::{{ id }} => Some("{{ codes[id].local_full_name }}"),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "languages")]
     pub fn languages(&self) -> Option<&[LanguageCode]> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].languages %}
             Self::{{ id }} => Some(&[{% for language in codes[id].languages %}LanguageCode::{{ language | capitalize }},{% endfor %}]),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "languages")]
     pub fn administrative_language(&self) -> Option<LanguageCode> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].administrative_language %}
             Self::{{ id }} => Some(LanguageCode::{{ codes[id].administrative_language | capitalize }}),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "formerly")]
     pub fn former_short_name(&self) -> Option<&'static str> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].former_short_name %}
             Self::{{ id }} => Some("{{ codes[id].former_short_name }}"),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
     
     #[cfg(feature = "formerly")]
     pub fn former_alpha_3_code(&self) -> Option<&'static str> {{ "{" }}
         match self {{ "{" }}{% for id in all_ids %}{% if codes[id].former_alpha_3_code %}
             Self::{{ id }} => Some("{{ codes[id].former_alpha_3_code }}"),{% endif %}{% endfor %}
             _ => None,
         {{ "}" }}
     {{ "}" }}
{{ "}" }}
