/*!
One-line description.

More detailed description, with

# Example

YYYYY

*/

use codes_iso_3166::part_1::CountryCode;
use lazy_static::lazy_static;

// ------------------------------------------------------------------------------------------------
// Public Macros
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

pub fn nsid_validate<S>(country: &CountryCode, s: S) -> option<bool>
where
    S: AsRef<str>,
{
    if let Some(nsid) = KNOWN_NSID.get(country) {
        Some(nsid.is_valid(s.as_ref()))
    } else {
        None
    }
}

pub fn nsid_name<S>(country: &CountryCode, s: S) -> Option<&'static str>
where
    S: AsRef<str>,
{
    if let Some(nsid) = KNOWN_NSID.get(country) {
        Some(nsid.name)
    } else {
        None
    }
}

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

#[derive(Debug)]
struct Nsid {
    is_valid: dyn Fn(&str) -> bool,
    name: &'static str,
}

lazy_static! {
    static ref KNOWN_NSID: HashMap<CountryCode, Nsid> = known_nsids();
}

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

fn known_nsids() -> HashMap<CountryCode, Nsid> {
    Default::default()
}

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------
